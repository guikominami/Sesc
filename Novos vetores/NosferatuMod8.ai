%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.0.0%%For: (gui) ()%%Title: (NosferatuMod8.ai)%%CreationDate: 09/05/22 20:41%%Canvassize: 16383%%BoundingBox: 20 211 523 924%%HiResBoundingBox: 20.1138 211.0459 522.5967 923.0337%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 367.5 462.5 367.5 462.5%AI3_TileBox: 61.2129 67 673.2129 859%AI3_DocumentPreview: None%AI5_ArtSize: 734.4258 926%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -599 988 0.6667 1172 577 18 0 0 66 130 0 0%AI5_OpenViewLayers: 7%%PageOrigin:69 42%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 92 128 8%%BeginData: 14054 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD31FFFD04A8FD10FFA8FFA8FD20FFA8FD13FFA8FD0EFFA8A8FFFF%FFA8A8FD0EFFA8FD22FFA8FFA8FD11FFA8FFA8FD0DFFA8FD05FF7DA8FD12%FFA8FD16FFA8AFA8FFA8A8A8FFFFFFA8FD0FFFA8FFFFFFA8FD0CFFA8FFFF%FD05A8FD0DFFA8FFA8AFA8A8A8FD14FFA8FD0BFFA8FD0DFFA8FD05FFA8FD%09FFA8FFA8FFFFFFA8A8A8FD0DFFA8FFA8FFA8FFA8FD14FFA8FD0BFFA8FD%09FFA8FFA8FD11FFA8A8A8FFFFFF7DFFA8FD0DFFA8FD07FFA8FD20FFA8FD%07FFA8FD0BFFA8FD07FFA8FD07FFA8FD05FF7DA8A8FD05FFAFFD09FFA8FD%12FFA8FD07FFA8FF7DFFA8FD08FFA8A8FD07FFFD05A8FD06FFA8A8FD06FF%A8A8FFFFFFA8A8527D52A8FD0CFFA8AFFD11FFA8FD09FFA8FFA8FD09FFA8%FD07FFA8FFA8FD09FF7DFD07FFA8FD07FF7D7D7DFD0DFFA8FD10FFA8FFFF%A8A8FD11FFA8FD08FFAFFD0AFF7DA8FD08FFA8A8A8FFA8A8FFA87DA8FFFF%A8FD1EFFA8FD07FFA8FD09FFA8FD14FFA8FFFFA8FD09FFA8A8A8FD09FFA8%FD07FFA8FD04FFA8A8FD0AFFA8FFA8FFA8FD07FFA8FD08FFAFA8FFA8FD07%FFA8FD08FFA8A8FFA8A8A8FD04FFA8A2A8A8FFA8FFA8FD07FFA8FD06FFA8%A8FFA8FFA8FFA8A8A8FD1EFFA8FFFFFFA8FD0FFFA8FFA8FFA8FD05FFA8FF%FFFFA8FFA8FD05FFA8FFA8FFAFFD05FFA8FD07FFA8A8A8FD08FFA8FFA8FF%A8FD05FF7DFFA8FD05FFA8FFA8FFA8FD0AFFAFFD04FF84A8FFA8FFA8FFFF%A8FD05FFA8FFFFFFA8A8FD04FFA8FD0BFFA8FFFFA8A8FFA8A87DA8FD12FF%A9A8FD05FFA8FD05FFA8FFA8FD05FFA8FD05FFA8A87DFFA8FFA8FFFFA8FD%04FFA8FD0BFFA8FFA8FFA8FD05FFA8FFA8FFFFFFA8FFFFA8A8FD08FFA8FF%A8FFA8FD05FFA8A8A8FFA8FFA8A8A8FFA8FD05FFA8FD04FFA8A8FFA8FFA8%FFFFA87DA8A8FFA8FFA8FD05FFA8FD0DFFAFFFA8FD05FFAFFFA8FFA8FD0E%FFA8FFA8FFA8FD05FFA8FD05FFA8A8A8FFA8FFA8FD07FFA8FFFFFFA8FFFF%FFA8A8A8FD04FFA8FD10FFA8FFA8FD1EFFA8FD06FFA8A8FFA8A9A8A87DA9%FD06FFA8FD05FFA8FFFFFFAFFFA8FF7DFFA8FFA8FFA8FD05FFA8FD0BFFA8%FFFFFFA8FD05FFA8FD12FFA9FFFFFFA8FD05FFA8FFA8FFFFFFA8A8FFFFA8%FFA8FD0DFFA9FD05FFA8FFA8FFA8FD05FFA8FD28FFA8FFA8A9A8FD0BFFA8%FFFFAFA8FFA8FFA8FD05FFA8FFA8FFA8FD06FFA8A8FF7DA8FD04FFA8A8FD%0AFFA8FFA8FFA8FD05FFA8FD12FFA8FFFFFFA8FD0FFFA8FD15FFA8FFFFFF%A8FD05FFA8FD0DFFA9FD07FFA8FD10FFA8A8A8FFA8FFA8FD05FFA8FD09FF%A8FFA8FFA8FD05FFA8FD0BFF7DA8A1A8FD05FFA8A8FD09FFA8FFFFFFA8FD%18FFFD04A8FD08FFAFFD07FFA8FD05FFA8FD05FFA8FD09FFA8A87D7D7DFD%06FFA8FD09FFA8A8FFA8FFA8FD16FFA8A87EA884FFA8FFA8AFA8FFFFFFAF%FD05FFA8A8A8FFA8FFFFAFFD06FFA8FD08FFA87D7D7DFFA8FFFFFFA8FFFF%A8A8FD07FF7DFD04A8FFFFFFA8FFFFFFA8FD10FFA8A8A8FD07FFA8FD09FF%A8A9A8AFA8FFA8FFFFFFA8FFFFFFA8FD07FFA8A87DA8CBFFFFA8A8FD0DFF%A8A8FD06FFA9FD13FFA8A8FD05FFA8FFFFFFA8FFA8FD05FFFD05A8FD05FF%A8FFA8FFFFFFA8FD08FFA8FFA8A8FFA8FFFFA8A8FFA8CAFD07FFA8A8FFA8%FFFFAFFFFFA8FFFFFFA8FD12FFA8FD09FFA8FD06FFAFA8FD05FFA8FFFFFF%A8FD0DFFA8FFA8FD04FFA8FFFFA8FD0DFFA8FD18FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FD05FFA8FFFFFFA8FFAFAFFD04FFA8FFA8FD09FFA8A8FFA8A8FF%FFFFA8FFA8A8FD0AFFA8FFA8FD05FFA8FFA8FD12FFA8FFA8FD05FFA8FFA8%FD1FFFA8FFA8FD07FFA8FD11FFAFFD2AFFA8FFA8FD05FFA8FFA8FD09FFA8%A8FFA8A8FFFFFFA8FFFFA8FD0CFFA8FD07FFA8FD12FFA8FFA8FD05FFA8FF%A8FD1FFFA8FFA8FD04FFA8A8FFA8FD09FFA8FD07FFA8FFA8FD12FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FD09FFA8FFA8FD05FFA8FFA8FD09FFFD04A8FD04%FFA8FFA8A8FD0AFFA8FFA8FFFFFFA8FD16FFA8FFA8FD05FFA8FFA8FD1FFF%A8FFA8FD04FFA8FFFFA8FD13FFA8FD10FFA8A8A8FFFFFFA8FFFFFFA8FFFF%FFA8FFA8FD07FFA8FFA8FD07FFA8FD09FFFD04A8FD04FFA8FFFFFFA8A8FD%08FFA8FFA8FD07FFA8FD0EFFA8FD05FFA8FD05FFA8FD0BFFA8FD07FFA8FF%FFFFA9FD05FFA8A8A8FFFFFFA8FFFFFFA8FD05FFA8FD05FFA8FFA8FD05FF%A8FD05FFA8FD0EFFA8FD05FFA8FFFFFFA8FD07FFA8FFA8FFA8FFA8FFA8FF%FFFFA8A8FD08FFA8A8FD05FFA8A8FFFFA87DA8A8FFFFFFA8FFFFFFA8A8FD%04FFA8FFFFFFA8FFA8FFFFFFAFFD0CFFA8FD07FFA8FFA9FD07FFA8FD09FF%A8FFFFFFA8FFA8FFA8FD05FFA8FD05FFA8A8A8CAFD05A8FFFFA8A8FD09FF%A8FD05FFA8FD0EFFA9FD09FFA8FD07FFA8FFFFFFA8FD06FFA8A8FFA8FFA8%FFA8A8A8FFA8FFA8A8FD10FFA8FFFFFFA8FD07FFA8FFA8FFA8A8A8FFA8A8%FD0BFFA8FD10FFA8FD14FFA8FFFFFF7DFD0FFFA8A8FFFFA8FD11FFA8FD0C%FFA8FD0FFFA8FFFFFFA8FD0FFFA8A8A8FFFFA87DFD0EFFA8A8FFFFFFA8FD%0FFFA8FD0EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD05FFA8FD15FFA8A8%A8FFA8A8A8FFA8A8A8FFA8CAA8FD05FFA8FD0DFFA8FD10FFA8FFFFFFA8FF%FFFFA8FFFFFFA8FD06FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FD07FFA8FFA8FFA8FFA8FFA8FFA8FFA8A9A8%FD30FFA8FD27FFA8FD17FFFD04A8FD15FFFD04A87DFD11FFFD05A8FD0EFF%A8A8FFA8A8A8FD14FFA8FFFFFFA8FD19FFA8FD0FFFA8A8FD04FFA8FD0DFF%A8FD04FFA8FD13FFA8FFA8FFFFA8A8FD13FF7DFD04FFA8A8FD0DFFA8A8FD%04FFA8A8FD0BFFCAA8FFA8FFFFFFA8FD13FFFD04A8FFA8FD14FFA8A8A9A8%A8A8FD0FFFA8A8A8FFFFFFA8FD0CFFFD04A8FFFFA8A8FD11FFA8A1FFFD05%A8FD13FFA8FFA8FFA8A87DFD0EFFA87DFFFFFFA8A8A8FD09FFA8FFFFA17D%FFFFFFA8FFA8FD0FFFA8A8FD07FFA8FD11FFA8FD07FFA8FD0DFFA8A8A8FD%05FFA8FD06FFA8FD04FFA8A8A8FD05FFA8FD0EFFA8FD08FFA8FD10FFA8FD%09FFA8FD0DFFA8A8FD05FFA8A8FFFFA87D7D7DA8FD04FFA8FD07FFA8FD0C%FFA8FD09FFA8FD10FFA8FD09FFA8FD0DFFA8FD07FFA8FFA8527D7DA8A8FD%04FFA8FD07FFA8FD0CFFA8A8FD08FFA8A8FD0FFFA8FD09FFA8FD0BFFA8A8%FD08FFA8FF7D7D7DFFA8A8FFFFA8A8A8FD07FFA8A8FD0BFFA8FD09FFA8FD%10FFA8FD0AFFA8FD0AFFA8FD0AFFA8FFFFFFA8FFA8FFA8FD0BFFA8FD0AFF%A8A8FFFFA8FD07FFA8FD0FFFA8FD07FFA8FFA8A8FD04FF7D7DA8FFFFA8A8%FD07FFA8FFFFA8A8FFFFFD04A8FFFFA8A8FD05FF7DA8FFFFA8FD0CFF7DA8%FD07FFA8FD0EFFA8FD08FFA8FFFFA8FFFFFF7D7DA8FFFFFFA8FFA8A8FD05%FFA8A8FFFFA8FFFFA8FFFFFFFD04A8FD06FFA8FFFFA8FD09FFA8FFFFA8A2%FD05FF7DFFA8A8FD0DFFA8FFA87DFD05FF7DFFFFA8A8FF7D7D7DFFA8FFA8%FFFFA87DFD05FFA8FFA8FFA8FFFFFFA8A8A8FFFFFFA8FD05FFA8FFA1FFA8%FD0CFFA8FD06FFA8A8FFA8FD0DFFA8FFA8FD06FFA8A8FFA8FFFFA876A8A8%FFA8FFFFFFA8FD05FFA8FD04FFCAFD0EFFA8FD04FFA8FD09FFA8FFA8A8A8%FD05FFA8FFA8FFA8CAA8FD07FFA8A8A8FFA8FFA8FD04FFA8A8A8FFFFA8FF%A87DFFFFA8FFFFFFA8FFA8FD04FFA8FFFFA8FFA8FD09FFA8FD04FFA8FFA8%A8FFA8FD09FFA8FFCAFFA8A8FFFFFFA8CBFFFFA8FFFD04A8FFFFA8CAA8A8%FFFFA8FFFFA8FD04FFA8FFA8FFFFA8FD06FFA8A8A8FFFFA8FD04FFA8FFFF%A8FFA8FD08FFA8FD05FFA8FFA8FFA8FD0AFFA8FFA8FFA8FD05FFA8FFFFFF%A1FFFFFF7DA8A87D7DFFFFA8A8FFFFCAA8FD04FFFD04A8FFA8FD07FFA8FF%FFFFA8FD04FFA8A8FFA8FFA8FD08FFA8A8FD04FFA8A8A8FFA8FD09FFA8FD%04FFA8FD0AFFA8A8A1A1A8FF7DA8A8A8FD04FFA8FD05FFA8FD04FFA8FD0A%FFA8FD05FFA8FFA8FFA8FD09FFA8FD05FFA8FFA8FFA8FD08FFAFA8FFA8A8%FFA8A8FD04FFA8FD05FF7D7D7DFFFFA8527DA8FD04FFA8FD04FFA8A8FFFF%A8FFA8A8FD09FFA8A8FFFFFFA8A8FFA8FFA8A8FD07FFA8A8FD04FFA8A8A8%FFA8FD09FFA8FFFFA8FFFFFFA8FD05FFA8FFFFFFA87D7DA8FFFFFF7D52A1%FD04FFA8FD05FFA8FFFFFFA8FFA8A8FD08FFA8FD07FFA8FFA8FD09FFA8FD%04FFA8A8FFFFCAFD07FFAFA8FFFFA8FFFFFFA8A8FD05FFA8A8FFFFFFA8FD%07FFA8FFFFFFA8FD05FFA8A8FFFFFFA8A8FFA8FD07FFA8A8FD04FFA8FFA8%FFA8A8FD08FFA8A8FD04FF7DA8FFFF7DFD08FF7DFFA8A8FD04FFA8FD05FF%A8FD17FFA8FFFFFFFD04A87DFD07FFA8FD06FFA8FFFFA8FD09FFA8FD04FF%A87DA87DA8FD07FFA8FD047DFFFFFFA8A8FD06FFA8FD0FFFA8FD05FFA8A8%FD04FF7DA87DA8FD06FFA8FD05FFA8FF7DA17DA8FD08FFA8FD05FF7DA87D%7DA8FD08FF7DA87DA8FD04FFA8FFFFFFA8FFFFA8FD0FFFCAFD05FFA8FD05%FFA87D7DA8FD05FFA8FD05FFA8FFFFA87DA87DFD06FFA8A8FFA8A8A8FFA8%FFA8A87DA8FD08FFA87DA8FD05FFA8A8FFA8A8A8FFA8FD0EFFA8A8FFA8A8%A8FFA8FD05FFA8A87DFD05FFA8FFFFFD06A8FFA87D7DA8A8FFFFFFA8A8A8%FFA8A8FFA8A8FFA8FF7DA8A8FD08FFA8FD07FFA8FFFFA8FD04FFA8FD0DFF%A8FFA8FFFFA8FFFFA8FD0BFFA8FD05FFA8FFFFA8FFFFA8A8FD06FFA8FFA8%FD07FFA8FD12FFA8FFFFA8A8FFA8FFA8A8FD0CFFA8A8FFA8A8FFA8FFFFA8%A8FD09FFA8FFFFA8A8FFFFFFA8FFA8FD09FFA8FFFFA8A8FFFFFFA8FFFFA8%FD11FFA8FFFFFFA8FFFFFFA8FFA8FD0DFFA8FFA8FFFFFFA8FD0DFFA8FFA8%FD05FFA8FFA8FD08FFA8FFFFA8FD05FFA8FFA8FD11FFA8A8FFA8FFFFFFA8%A8FFA8FD0CFFA8FFA8A8FFFFFFA8A8FFA8FD09FFA8A8FFA8A8FFFFFFA8A8%FFA8A8FD07FFFD04A8FD05FFA8A8FFA8FD10FFA8FFFFA8FD04FFA8FFA8FD%0CFFA8FFFFA8FFFFFFA8FD0DFFA8FFFFA8FD04FFA8FFA8FD09FFA8FFA8FD%05FFA8FFA8FD12FFA8FFA8FFFFFFA8A8FFA8A8FD0BFFA8FFA8A8FFFFFFA8%A8FFA8FD0AFFA8A8FFA8FFFFFFA8A8FFA8A8FD07FFA8A8FFA8FD04FFA8A8%FFA8A8FD11FFA8FFCBFD04FFA8FFA8FD0FFFA8FFFFFFA8FFFFA8FD0BFFA8%FFFFA8FFFFFFA8FFA8FD09FFA8FFA8FD05FFA8FFA8FD12FFA8FFA8FFFFFF%A8FFFFA8A8FD0BFFA2FFFFA8A8FFFFA8A8FFA8FD0BFFA8FFFFA8A8FFA8A8%FFA8A8FD06FFCAA8FFFFFFA8FFFFFFA8A8FFA8A8FD11FFA8FFFFA8FD05FF%A8A8FD0AFFA8A8FFFFA8FFFFFFA8FFA8FD0BFFA8FD07FFA8FFA8FD06FFA8%A8FD09FFA8FFA8A8A8FD0EFFA8A8A8FFA8A8FFFFA8FFFFFFA8A8A8FD07FF%A8FD04FFCAA8FFA8A8FFFFA8A8A8FD07FF7DFD05FF7DFFA8FFFFFFA8A8A8%FFFFFFA8FD05FFA8FFFFFFA8FD05FFA8FD0CFFA8FD05FFA8FFFFA8FD06FF%A8FD05FFA8FD06FFA8FFFFA8FD04FFA8A8FD05FFA8CAFFFFA8A8A8FFFFA8%CAFD04FFA8FFFFA8FFFD07A8FFFFA8FD05FFA8FD0BFFA8A8FD05FFA8A8FF%7DA87DA8A8FFA8A8FD04FFA8A8FFFF7DA87DA8A8FF7DFD05FFA8A8A8FFFF%FFFD04A87DA8A8FFA8FFA8FD05FFA8FFA8A8A8A17DA8A8CAFD05A8FD05FF%A8FD0AFFA8FFA8FD07FFFD06A8FFFFA8FD05FFA8FFFD05A8FFA8FD07FFA8%A8A8FFA8A8A8FFA8A8A8FFA8FFA8FD07FFA8FFA8FD1AFFA8A8FD10FF7DFD%05FFA8A8FD10FFA8A8FFA8A8FD0FFFA8A8FFA8A8FD0FFF7DFD0AFFA8A8FD%0EFFA8A8FD06FFA8A8FD0EFFA8A8A8FFA8A8FD0FFFA8A8FFFFA8FD0EFFA8%FD0CFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD07FFA8A8A8FFA8FFA8%FFA8FFA8FFA8FFA8A8A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFFD10A8FD0DFFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FD09FFA8FFA8%A8A8FFA8A8A8FFA8A8A8FFA8FD05FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8%FD56FFAFFD2CFFA8FFA8FD29FFA8FFA8FFA8FD11FFA8A8A8FD16FFA8FFFF%FFA8FD13FFA8A9A8FFA8FD0FFFA8FD04FFA8A8FD0FFFA8FFA8FF7DA8FD19%FFA8FD17FFA8FD13FFA8FD0FFFA8CBFD04FFA8A8FD13FFA8A8A8FFFFA8FD%12FFA8FFAFFFFFA9FD0EFFA8FFA8A8A8FFA8FD0EFFA8A8FFFFFFA8A87DFD%12FFA8FFA8FFA8FFA8FD14FFFD04A8FD0DFFA8FFFFFFA8FD11FFA8FFFFFF%A8A8A8FD12FFA8FD07FFA8FD0FFFA8A8A8FFA8AFA8FFA8FD0BFFA8FFA8FD%05FFA8FD0CFFFD04A8FFA8A87DA8FD1BFFA8FD2BFFA8FD0BFFA8FD05FFA8%FD14FFA8FD09FFA8FD15FFA8FD1FFFA8FD06FFA8FD05FFA8527D7DA8FD21%FFA8FD13FFA8FD09FFA8FD09FFA8FD07FFA8FD05FFA8A87D7D7DFD0AFFA8%FD09FFA8A8FD0AFFA8FD09FFA8FD09FFA8FD0FFFA8FD04FF7DA8FD07FFA1%FFFFFFA8A8FFA87D7DA8FD08FFA8FD0BFFA8FD21FFA8FD0CFFA8A8FFFFFF%A8FD09FFA8A8A8FFA8FFA8FFA8FD09FFAFFFFFA8FD05FFA8FFFFFFA8FD0B%FFA8FD13FFA8FD06FFA8A8FFA8FFFFFFA87EA8FFA8FFFFA8A8FD05FFA8FF%FFFF7DA8A8A8FD0DFFA8FD13FFA8FFFFFFA8FD05FFA8FFA8FD07FFA8FFA8%FFA8FD05FFA8FFFFFFAFFFFFFFA8A8A8FFFFFFA8FD06FFA8A8FD04FFA8FD%0BFFA8FFA8FFA8FD05FFA8FFA8FFA8FD07FFA8FFA8FD07FFA8A8A8FFA8FD%05FFA8FD05FFA8FD05FFA8FFFFFFA8FFA8A87DA8A8FFA8FFA8FD05FFA8FF%FD05A8FD06FFA8FFA8FFFFFFA8FD07FFA8FFFFFFA8FFA8FD0BFFA8FD05FF%AFFFFFFFA8FD05FFA8FFA8FD07FFA8FD05FFA8FFFFA8A8FFFFCAFD07FFA8%FD04FFA8FD06FFA8A8A8FFFFFFA8FFFFFFA8FD05FFA8FD05FFA8FD05FFA8%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8A8A8FFA8FD05FFA8FD05FFA8FFA8%FFA8FD05FFA8FFA8FFA8FD05FFA8FD0CFFA8FD07FFA9FD05FFA2FFFFFFA8%FD07FFA8FFA9FFFFFFA8FD05FFA8FFFFFFA8FFFFFFA8A8A8FFA8FD12FFCA%A8FFFFFFA8FD04FFA8FD0BFFA8A87DA8FD06FFA8FFFFFFA8A8FD04FFA8FF%FFA9A8FFA8FFA8FD04FFA8A8FD05FFA8FFFFFFA8FFA8A87DFFA8FFA8FFA8%FD05FFA8FD09FFFD04A8FFA8FD04FFA8FD0CFFA8A87DFD05FFA8FD05FFA1%FD07FFA8FD09FFA8A8FD04FFA8FD06FFA87DAFFD16FFA8FFA8FFA8FD05FF%A8FD0CFFA8FD0BFFA8A8FD04FFFD05A8AFFFFFA8FD05FF7DFD05FFA8FD05%FF7DA8A8FFA8FFA8FFA8FD05FFA8FD0AFFA8A8FFA8A8A8FFFFFFA8A8FD13%FFA8FD05FFA8FD05FFFD05A8FFA8A8FD04FFA8A8FD0AFFA8FD07FFA8FD07%FFA8FD0AFFA8FFFFA1FD05FFA8FD12FFA8A9FD04FF7DA8FD05FFA87DA8A8%A87DA8A8FD05FF7DFD05FFA8FD09FFA8FFFFA8A8FD07FFA8FD09FFA8FFFF%A8A8FD04FFA8A8FD17FFA8FD06FFA8FFA8FFA8A8A8FD06FFA8FD0FFFFD04%A8FFA9FD10FFA87DA87DA8FD19FFA8FFFFFFA8FD07FFAFFFFFFFA8FFA8FD%05FF7DFD05FFA8FD09FF7EA884A8A8FFFFFFA8FD0DFF7D7D7DA8A8FD05FF%AFA8FD11FFA8FFA8FD16FFA8A8FFFFFFA8FD0AFFA9A8A8FFFFA8FFFFFFA8%FFFFFFA9FD08FFA87D7DA8FFFFFFA8FFFFFFA8A8FD0BFFA8FFFFFFA8FFFF%FFA8FFA8FD13FFA8FFA8A9FFFFA8FFA8FD08FFA8A8FFA8FD05FFA8FFFFFF%A8FD07FFA8A87DFFA8FFFD04A8FFFFA8A8FD0DFFA8FD07FFA8FD29FFA8FD%14FFA8FFFFFFA8FFFFA8FD0AFFA8FFFFFFA8FD07FFA8FD11FFA8FFA8FD05%FFA9FFA8FD09FFA8FFA8FD05FFA8FFA8FD0BFFA8FFA8FFFFFFA8A8FFA8A8%FD0AFFA8FFA8FD05FFA8FD13FFA8FD07FFA8FD0BFFA8FD07FFA8FD0DFFA8%FFFFA8FD04FFA8FFA8FD0BFFAFA8FFA8FD05FFA8FFA8FD0FFFA8AFFFFFA8%FD05FFA8FFA8FD09FFA8FFA8FD04FFA9A8FFA8FD0AFFA8A8FFA8FFFFFFA8%A8FFA8A8FD0AFFA8FD07FFA8FD13FFA8FFA8FD05FFA8FFA8FD11FFA8FD0D%FFA8FFA8FD05FFA8FFA8FD0CFFA8FFA8FD05FFA8FFA8FD17FFA8FD0DFFA8%FFA8FFFFFFA8FD0EFFA8FFA8A8FFFFFFA8A8FFA8A8FD0EFFA8FFFFFFA8FF%A8FD11FFA8FFA8FD07FFA8FD13FFA8FD0BFFA8FFA8FD04FFA8A8FFA8FD0A%FFA8FFAFFFFFFFA8FFA8FFFFA9A8FD13FFA8FFFFFFA8FFA8FD09FFA8FFA8%FFA8FFFFFFA8FFFFFFA8FD0AFFFD04A8FFFFFFA8FFFFA8A8FD16FFA8FD0F%FFA8FD05FFA8FFFFFFA8FD07FFA8FD05FFA8FFA8FD05FFA8FD07FFA8A8A8%FFA8FD04FFCAFD04FFA8FD08FFA8FFFFFFA8FFFFFFA8FD05FFA8FD0DFFA8%FFFFFFA8FFA8A8FD04FFA8FD06FFA8FD04FFA8FFFFFFA8FFA8FD09FFA8FD%04FFA8A8FFFFFFA8FD05FFA8FD06FFA8FFFFA8A8FFA8FFA8FD07FFA8FD15%FFA8FFFFFFA8FD05FFA8FD05FFA8FFA8FFA8FFA8FFFFAFFD04FFA8FD05FF%FD06A87DA87DFFFFFFA8FD04FFA8FFFFFFA8FFA8FFA8FD09FFA8FD08FFA8%A8FD05FFA8A8A8FFA8A87DFFFFFFA8FFFFFFA8FD07FFA8FFA8FFA8FFA8FF%A8FFA8FFFFA8A8FD05FFA8FFA8FFA8FFA8FFAFFFA8A8FD05FFA8FD0FFFA8%FD09FFA8FD25FFA8FFFFFFA8FD11FFA8FD06FFA8FD18FFA8FD10FFA8FFFF%FFA8FD0FFFA8FD05FF7DFD0FFF7DFD08FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FD19FFA8FD05FFA8FD15FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD08%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD0BFFA8FFA8FFA8A8A8FFA8A8A8%FFA8A9A8FD07FFA8FFA8AFA8FFA8AFA8FFA8AFA8FFA8FD05FFFD11A8FFFF%FF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A0 R0 0 0 1 K0 J 0 j 1 w 10 M []0 d0 XR92.3701 731.9951 m92.3701 718.9424 L67.0791 718.9424 L61.813 740.0771 L62.813 767.0151 L70.895 791.3394 L78.207 794.0332 L93.1401 768.939 L94.6787 747.7729 L92.3701 731.9951 Lsu78.3818 846.9199 m78.2998 848.0269 L78.0029 852.0654 L79.9678 850.5898 L80.1582 848.6187 l79.5562 847.6006 84.8291 831.4438 y87.2529 817.7324 93.3989 820.9956 y96.6191 822.5908 101.8779 824.5435 y104.5459 825.3994 108.0322 826.4604 y108.9092 827.2998 110.4492 827.0586 y111.999 824.8125 113.769 825.4248 y114.6118 824.2905 117.3989 823.5015 y117.7549 823.1797 118.4512 821.7925 y118.5322 821.3369 120.0649 819.7876 y120.0811 819.4478 118.8311 816.8765 Y120.604 817.7036 l122.3198 821.7676 121.356 821.4248 120.8262 822.4844 c120.7969 822.5415 120.7612 822.6055 120.7178 822.6738 c119.979 823.8516 117.3091 826.4336 Y113.998 830.4209 l114.667 829.7695 117.8291 830.2808 y118.645 829.5288 120.4111 828.3916 Y121.5542 824.6855 l122.2402 822.4985 124.2529 820.0146 Y124.248 820.5269 l123.5781 821.9028 123.5371 827.2837 y123.439 828.8057 121.1191 831.9355 y120.0601 832.1348 116.479 834.7456 y115.1172 835.4458 114.106 836.3345 y114.3721 836.5107 116.8018 836.6445 y117.146 836.1494 121.562 835.1416 y122.1548 834.6914 124.6118 830.6006 y124.1919 829.5879 125.2261 827.6797 Y126.3359 824.1636 l127.561 825.7056 126.54 830.7466 y126.4238 831.4077 123.9082 836.2407 y122.8638 837.5518 118.2949 839.2539 Y114.21 839.6436 L114.2178 842.1787 L119.0259 842.2466 l121.0298 842.3345 121.5479 839.7676 y122.4619 841.2314 121.2119 844.9844 y117.481 846.9316 111.374 843.8965 y109.7012 843.6865 105.7329 837.9126 y105.0889 837.5415 102.8418 834.3716 Y95.6582 831.3428 l88.5601 849.0889 88.9751 851.8984 V88.8618 853.3345 L83.9038 872.7188 L76.7202 878.2344 L78.8032 880.5435 L87.4951 874.6426 L87.3672 877.9785 l89.4839 878.9404 89.8682 880.2236 v88.3291 880.0947 86.7261 880.6719 V87.752 888.6255 l93.0112 877.5938 93.2681 875.6685 V99.1479 879.5615 L100.3252 876.1958 L102.3442 876.7017 L103.0181 881.9165 l104.1958 883.4316 103.438 884.5254 y103.7749 885.0308 103.7749 887.7227 y104.2808 888.0596 106.0142 889.4907 Y105.9619 891.5098 l106.2148 892.6865 105.4321 894.2856 Y104.9512 898.6606 l104.5322 901.4375 102.5972 903.7085 Y98.3901 908.1685 l93.8462 912.2075 89.3872 911.0298 y88.5459 910.9458 84.6758 907.8325 Y83.1602 909.0107 L79.459 906.8228 L76.8511 903.3735 l75.3359 904.2988 73.3159 903.8774 y71.9712 903.6255 69.0249 904.2988 y66.248 905.1406 62.5449 904.2988 Y60.106 902.6597 L56.9941 902.4478 l48.3262 903.8774 40.9238 897.6504 Y37.0991 894.6777 L37.0928 894.7065 l37.0762 894.6885 37.0508 894.6528 37.0288 894.6235 C37.021 894.6167 L37.0229 894.6157 l35.8198 892.9707 28.0059 874.0718 y26.4912 872.1797 22.5151 864.9858 Y21.002 859.1167 l19.4868 853.2495 22.894 844.5405 y23.084 842.2695 32.5488 817.8486 y31.0361 815.7666 29.3311 809.3296 y23.084 800.8115 22.1372 786.8027 y24.9771 795.1328 34.2529 806.0425 y31.4131 802.3774 27.8179 781.8809 Y29.4019 778.7495 L30.0869 784.5317 l30.6558 787.7495 36.7129 799.4858 y35.0112 793.8066 34.2529 791.7246 v33.4951 789.6426 36.5249 781.1235 36.335 781.8809 c36.147 782.6387 36.9038 790.0205 36.9038 791.3457 c36.9038 792.6719 42.96 800.0557 Y42.3931 791.7246 L40.2412 789.4604 L46.4951 791.3857 L47.5532 807.0674 L35.9038 841.9834 L32.3721 857.2256 L39.436 871.3535 L42.4111 868.1187 L43.2671 867.1875 L46.0229 850.0625 L54.606 797.6235 L56.0532 795.0977 L49.5771 767.8657 L49.1919 739.3877 L39.647 736.3086 L30.7949 731.6904 L29.3652 719.4077 L27.0659 719.4077 L27.0659 706.9028 L33.8491 706.9028 L33.8491 695.9028 L118.8882 695.9028 L118.8882 706.9028 L124.6328 706.9028 L124.6328 718.4756 L133.1631 718.4756 L131.624 724.3789 L124.312 732.9116 L108.1479 738.2334 L108.918 745.1606 L108.1479 772.8687 L88.0322 805.6826 L78.9009 840.3447 L78.2998 848.0269 LS78.2324 846.1929 m78.1504 847.2998 L77.853 851.3389 LSU211.3594 749.9346 m206.2065 734.8438 L203.6514 721.0938 L232.9946 715.6416 L182.3086 715.6416 L179.4023 732.1904 L180.4023 759.1294 L183.5474 776.5264 L186.4834 784.4536 L193.7954 787.1475 L209.6382 772.3057 L211.2686 749.8936 LSu183.3667 897.6216 m174.4868 896.1787 173.2388 894.6113 V173.5825 894.5615 l164.9155 895.9927 157.5127 889.7646 Y153.6875 886.7905 L153.6816 886.8203 l153.6646 886.8027 153.6396 886.7666 153.6177 886.7363 C153.6147 886.7324 l152.4199 885.1094 144.5957 866.1855 y143.0796 864.2935 139.1045 857.1006 Y137.7925 852.0127 l135.2646 846.5317 136.8999 837.4805 y136.6499 835.2144 141.2378 809.4287 Y141.0835 809.1357 l140.1797 806.7256 140.2539 800.0664 y136.5039 790.1904 139.3286 776.4365 y139.8438 785.2227 145.8735 798.2114 y144.1147 793.9224 146.1157 773.2075 Y148.4775 770.6133 L147.5957 776.3677 l147.2856 779.6216 149.9937 792.5474 y149.8677 786.6206 149.6929 784.4116 v149.5176 782.2036 154.7095 774.8008 154.3247 775.4795 c153.9409 776.1597 152.7017 783.4775 152.3486 784.7534 c151.9946 786.0317 155.8628 794.7637 Y157.5386 786.5825 L156.0679 783.8276 L161.5815 787.3496 L158.4199 802.7466 L151.8735 812.5415 L149.1748 832.4668 L148.6426 848.1035 L158.2949 860.6074 L159.0527 859.9746 L159.8564 859.3027 L162.6128 842.1758 L173.1958 787.2725 L166.1655 759.5146 L167.7817 731.0366 L156.2358 727.9575 L147.3848 723.3394 L146.4878 715.6416 L142.8745 715.6416 L142.8745 703.1377 L149.6587 703.1377 L149.6587 692.1377 L234.6978 692.1377 L234.6978 703.1377 L240.4419 703.1377 L240.4419 714.2578 L243.7588 713.6416 L243.3228 719.7275 L237.6929 729.4517 L222.7739 737.6367 L224.0269 745.0767 L224.7378 774.5234 L214.1636 787.9897 L204.6206 798.3315 L195.4897 831.9937 L194.5918 844.1797 L198.1196 840.2656 L198.2329 839.8516 l199.4077 837.1587 209.4409 824.0776 y216.5586 812.1123 221.1538 817.3384 y223.6006 819.9697 227.8286 823.6567 y230.0205 825.4014 232.9067 827.6265 y233.4297 828.7217 234.9546 829.0415 y237.1997 827.4883 238.6387 828.6875 y239.8276 827.9258 242.7148 828.1738 y243.1606 827.9985 244.3027 826.9463 y244.5396 826.5488 246.5215 825.6426 y246.6567 825.3315 246.3975 822.4834 Y247.7627 823.8848 l247.9307 828.2925 247.1499 827.6304 246.2798 828.4355 c246.2314 828.4775 246.1758 828.5254 246.1118 828.5728 c245.0039 829.4136 241.5928 830.8838 Y237.0859 833.4414 l237.9419 833.0693 240.7188 834.6655 y241.7476 834.2515 243.8008 833.8125 Y246.1816 830.7515 l247.5967 828.9487 250.3589 827.3364 Y250.1729 827.8145 l249.0596 828.8647 247.1177 833.8838 y246.4868 835.2705 243.2095 837.3784 y242.1475 837.1895 237.8755 838.3647 y236.3535 838.5376 235.0938 839.0117 y235.2808 839.2695 237.5059 840.2554 y238.0029 839.9146 242.4897 840.5337 y243.2026 840.3228 246.9497 837.3647 y246.9146 836.2686 248.5566 834.8506 Y250.8389 831.9546 l251.4385 833.8296 248.7017 838.1836 y248.3579 838.7607 244.2959 842.3916 y242.8545 843.2476 237.9785 843.2236 Y234.0195 842.1426 L233.1309 844.5166 L237.6025 846.2817 l239.4468 847.0728 240.8398 844.8555 y241.1768 846.5483 238.6807 849.6167 y234.5005 850.1167 229.8628 845.1177 y228.3726 844.3296 226.7036 837.5244 y226.2329 836.9507 225.2529 833.1895 Y219.6055 827.8154 l206.0737 843.2056 205.4678 845.9795 V200.4927 864.8325 L193.3086 870.3496 L194.6079 874.3154 L195.8125 877.1826 L205.9648 874.4775 L204.7427 877.5845 l206.4248 879.1904 206.3647 880.5283 v204.9536 879.8994 203.2495 879.9155 V201.5957 887.7627 l211.7388 880.6216 212.6157 878.8896 V215.3428 882.9634 L217.5645 880.1748 L219.3047 881.3174 L218.2207 886.4634 l218.8325 888.2817 217.7568 889.0645 y217.9077 889.6523 217.0195 892.1934 y217.3867 892.6797 218.5508 894.6006 Y217.8359 896.4907 l217.6855 897.6855 216.4209 898.9365 Y214.5249 902.9087 l213.2119 905.3916 210.6367 906.8975 Y205.1948 909.7207 l199.5728 912.0356 195.7515 909.4536 y194.9849 909.0967 192.3579 904.8804 Y190.5386 905.4937 L187.7656 902.2075 L186.4419 898.0918 l184.7056 898.4644 182.9375 897.4023 Y183.3667 897.6216 LsUu0.746 0.676 0.668 0.898 K4 M262.1567 878.0859 m258.4575 869.9038 l258.7046 870.272 258.9268 870.584 259.1128 870.8149 c260.4785 874.1187 262.1567 878.0859 Vs10 M325.3164 754.5171 m320.7231 738.7012 L318.168 724.9531 L340.5801 720.7881 L296.6714 720.7881 L293.9189 736.8188 L295.9189 763.7578 L299.064 779.1553 L302 787.082 L309.312 789.7749 L324.2451 775.689 L326.1421 757.3618 L325.3164 754.5171 Ls258.458 869.9043 m252.3652 856.0063 L251.8262 854.2964 l250.293 848.8765 254.3862 840.6401 y254.5151 838.5264 262.7871 815.6294 Y262.6909 815.3364 l262.2441 812.9844 263.3618 806.8965 y261.4858 797.2583 266.2432 785.1045 y265.3291 793.2344 268.8027 806.0854 y267.8691 801.8774 272.9702 783.2173 Y275.543 781.2144 L273.8281 786.3452 l273.0298 789.2773 273.4712 801.5464 y274.291 796.0962 274.479 794.0464 v274.668 791.9941 280.5908 786.0322 280.1309 786.5933 c279.6719 787.1563 277.3828 793.6641 276.8579 794.7773 c276.332 795.8921 278.498 804.5024 Y281.3242 797.2715 L280.4121 794.5151 L284.9063 798.6123 L279.5811 812.2173 L272.0381 820.1582 L266.4219 837.9854 L262.1572 849.915 L263.1602 851.9634 L272.811 864.4673 L272.811 865.2363 L274.373 863.9312 L278.7549 836.7002 L288.7119 788.9004 L282.6831 764.1421 L282.2979 735.6641 L270.752 732.5864 L261.9009 727.9673 L261.0649 720.7881 L260.1958 720.7881 L260.1958 708.2832 L266.98 708.2832 L266.98 697.2832 L352.019 697.2832 L352.019 708.2832 L357.7632 708.2832 L357.7632 717.5952 L358.894 717.915 L357.8398 723.5864 L352.209 733.3105 L337.29 741.4951 L338.543 749.9341 L338.543 749.7051 L339.2539 779.1523 L331.0249 790.3062 L319.1382 802.9604 L310.0059 836.6211 L309.021 860.5093 l309.0049 860.8921 309.4111 861.1475 309.7441 860.957 c313.4468 858.8413 329.207 852.6992 y341.3711 845.9253 342.7202 852.7524 y343.5151 856.2563 345.3198 861.5674 y346.3398 864.1772 347.7178 867.5503 y347.6201 868.7612 348.7788 869.8022 y351.5 869.5884 352.1421 871.3472 y353.5532 871.2852 355.9248 872.9492 y356.3989 873.0215 357.9141 872.6851 y358.3188 872.4614 360.4878 872.6724 y360.7607 872.4702 361.9668 869.8794 Y362.4438 871.7754 l360.376 875.6724 360.0332 874.707 358.876 874.9644 c358.813 874.9785 358.7412 874.9912 358.6621 875 c357.2822 875.1714 353.5928 874.7305 Y348.4121 874.6772 l349.3389 874.7861 350.938 877.5601 y352.0371 877.7192 354.0332 878.3711 Y357.6289 876.9204 l359.7578 876.0713 362.9551 876.0645 Y362.5552 876.3833 l361.0649 876.7324 356.8652 880.0972 y355.623 880.9814 351.731 881.1582 y350.9072 880.4624 346.623 879.332 y345.2202 878.7173 343.8921 878.4951 y343.9238 878.8125 345.3618 881.4473 y346.1489 881.8081 349.5229 883.5254 y350.2471 883.7012 354.9722 883.0234 y355.4932 882.0581 357.624 881.6563 Y361.0518 880.2993 l360.6289 882.2202 356.0752 884.6113 y355.4888 884.9385 350.1528 886.0381 y348.4761 886.0552 344.272 883.5864 Y341.3921 880.6631 L339.4302 882.2695 L342.4121 886.0425 l343.6079 887.6523 345.9268 886.4331 y345.3672 888.0664 341.668 889.4663 y337.8042 887.8003 336.3032 881.1484 y335.4102 879.7183 337.3838 872.9961 y337.2651 872.2622 338.3052 868.5181 Y336.1201 861.0352 l316.6899 867.5493 314.7729 869.6445 V314.6392 869.8423 L315.0088 869.4614 L307.8262 874.9775 L306.1841 885.4473 L298.7607 891.1924 L300.0107 895.1924 L309.8857 891.9424 L316.4761 895.2104 L313.4819 896.6851 l313.644 899.0063 312.7002 899.9551 v312.0801 898.541 310.8081 897.4063 V302.7651 902.0972 l305.895 904.0703 309.8262 904.375 v313.3032 904.6445 317.5752 903.2734 318.4268 902.9482 C317.7031 907.7983 L321.2241 907.2285 L321.7412 909.2451 L317.4771 912.3223 l316.7061 914.0801 315.3828 913.9351 y315.1001 914.4712 312.7319 915.7544 y312.6768 916.3594 312.2461 918.5645 Y310.4458 919.4805 l309.5313 920.2642 307.752 920.3384 Y303.6768 922 l301.0352 922.9551 298.1172 922.3364 Y292.1909 920.7612 l286.4761 918.6914 285.3872 914.2114 y285.0591 913.4302 285.9521 908.5444 Y284.1938 907.7734 L284.354 903.4761 L286.144 899.541 l284.6089 898.6494 284.0161 896.6733 y275.3491 898.1035 272.0288 894.3931 Y268.1748 891.3965 L267.041 888.9385 l266.3452 887.9912 264.4961 883.6143 262.1572 878.0864 C258.458 869.9043 Ls4 M420.3682 396.2207 m416.6699 388.0381 l416.917 388.4063 417.1396 388.7178 417.3242 388.9492 c418.6904 392.2529 420.3682 396.2207 Vs10 M483.5283 272.6514 m478.9355 256.835 L476.3799 243.0869 L498.792 238.9219 L454.8828 238.9219 L452.1309 254.9531 L454.1309 281.8926 L457.2764 297.2891 L460.2119 305.2158 L467.5244 307.9092 L482.457 293.8232 L484.3545 275.4961 L483.5283 272.6514 Ls416.6699 388.0391 m410.5771 374.1416 L410.0381 372.4307 l408.5049 367.0107 412.5977 358.7744 y412.7266 356.6602 420.999 333.7637 Y420.9033 333.4707 l420.4561 331.1182 421.5742 325.0303 y419.6982 315.3936 424.4551 303.2383 y423.541 311.3682 427.0146 324.2197 y426.0811 320.0117 431.1816 301.3525 Y433.7549 299.3486 L432.04 304.4795 l431.2422 307.4111 431.6826 319.6807 y432.5029 314.2305 432.6914 312.1807 v432.8799 310.1289 438.8027 304.167 438.3428 304.7275 c437.8838 305.291 435.5947 311.7988 435.0703 312.9111 c434.5449 314.0264 436.71 322.6367 Y439.5361 315.4053 L438.624 312.6494 L443.1182 316.7461 L437.793 330.3525 L430.25 338.293 L424.6338 356.1191 L420.3691 368.0498 L421.3721 370.0977 L431.0225 382.6016 L431.0225 383.3701 L432.585 382.0654 L436.9668 354.835 L446.9238 307.0342 L440.8945 282.2764 L440.5098 253.7988 L428.9639 250.7207 L420.1133 246.1025 L419.2773 238.9229 L418.4082 238.9229 L418.4082 226.418 L425.1914 226.418 L425.1914 215.418 L510.2305 215.418 L510.2305 226.418 L515.9746 226.418 L515.9746 235.7295 L517.1055 236.0498 L516.0518 241.7207 L510.4209 251.4443 L495.502 259.6299 L496.7549 268.0684 L496.7549 267.8398 L497.4658 297.2861 L489.2373 308.4404 L477.3496 321.0947 L468.2178 354.7559 L467.2324 378.6436 l467.2168 379.0264 467.623 379.2813 467.9561 379.0918 c471.6592 376.9756 487.4189 370.834 y499.583 364.0605 500.9316 370.8867 y501.7266 374.3916 503.5322 379.7012 y504.5518 382.3115 505.9297 385.6855 y505.832 386.8955 506.9912 387.9365 y509.7119 387.7227 510.3535 389.4814 y511.7646 389.4199 514.1367 391.084 y514.6113 391.1553 516.126 390.8193 y516.5313 390.5957 518.7002 390.8066 y518.9727 390.6045 520.1787 388.0137 Y520.6563 389.9092 l518.5879 393.8066 518.2451 392.8418 517.0879 393.0996 c517.0254 393.1123 516.9531 393.126 516.874 393.1348 c515.4941 393.3057 511.8047 392.8643 Y506.624 392.8115 l507.5508 392.9209 509.1494 395.6943 y510.249 395.8535 512.2451 396.5059 Y515.8408 395.0547 l517.9697 394.2061 521.167 394.1982 Y520.7666 394.5186 l519.2773 394.8662 515.0771 398.2314 y513.835 399.1152 509.9434 399.293 y509.1191 398.5967 504.835 397.4668 y503.4316 396.8525 502.1035 396.6299 y502.1357 396.9463 503.5742 399.582 y504.3613 399.9424 507.7354 401.6592 y508.459 401.8359 513.1836 401.1572 y513.7051 400.1924 515.8359 399.791 Y519.2637 398.4336 l518.8408 400.3545 514.2871 402.7451 y513.7012 403.0723 508.3652 404.1729 y506.6875 404.1895 502.4854 401.7207 Y499.6035 398.7979 L497.6416 400.4033 L500.624 404.1768 l501.8203 405.7861 504.1387 404.5674 y503.5791 406.2002 499.8809 407.6006 y496.0156 405.9355 494.5146 399.2822 y493.6221 397.8525 495.5957 391.1309 y495.4766 390.3965 496.5166 386.6523 Y494.332 379.1699 l474.9023 385.6836 472.9844 387.7783 V472.8506 387.9766 L473.2207 387.5957 L466.0381 393.1113 L464.3955 403.582 L456.9727 409.3262 L458.2227 413.3262 L468.0977 410.0762 L474.6875 413.3447 L471.6943 414.8193 l471.8555 417.1406 470.9121 418.0898 v470.292 416.6758 469.0195 415.541 V460.9766 420.2314 l464.1064 422.2051 468.0381 422.5098 v471.5146 422.7783 475.7871 421.4072 476.6387 421.083 C475.915 425.9326 L479.4355 425.3623 L479.9531 427.3799 L475.6885 430.457 l474.918 432.2148 473.5947 432.0693 y473.3115 432.6055 470.9443 433.8887 y470.8887 434.4932 470.458 436.6982 Y468.6582 437.6143 l467.7432 438.3984 465.9639 438.4727 Y461.8887 440.1348 l459.2471 441.0898 456.3291 440.4707 Y450.4033 438.8955 l444.6875 436.8252 443.5986 432.3457 y443.2705 431.5645 444.1641 426.6787 Y442.4063 425.9072 L442.5654 421.6104 L444.3555 417.6758 l442.8213 416.7832 442.2275 414.8076 y433.5605 416.2373 430.2412 412.5273 Y426.3867 409.5303 L425.2529 407.0723 l424.5566 406.126 422.708 401.749 420.3691 396.2207 C416.6699 388.0391 LsUu0 0 0 1 K408.125 897.8013 m410.1768 902.915 414.7949 905.1875 v417.7461 905.5654 419.2852 905.1875 v422.3271 904.2402 424.5898 898.748 V421.7227 897.8013 L420.7207 900.9043 L418.6436 897.8013 L412.835 897.8013 L412.835 901.5791 L410.5615 897.8013 L408.125 897.8013 Ls444.1201 773.9668 m440.7607 756.0225 L440.6934 756.0605 L432.4199 742.4277 L426.9727 729.5479 L457.1436 716.7856 L418 716.7856 L414.3867 735.7227 L411.5371 762.6616 L418.0723 780.4985 L420.4688 785.9858 L427.7793 789.6797 L444.2002 774.3936 L444.1201 773.9668 Ls384.6885 835.8306 m388.1689 817.0107 L394.5342 809.0322 L398.1602 794.8784 L393.1992 791.3613 L394.4395 793.9854 L392.5176 801.5054 l389.3174 793.2256 389.7041 792.0547 v390.0889 790.8857 391.5664 784.1465 391.9541 783.5322 c392.3408 782.9185 387.1895 789.5596 387.2529 791.6187 c387.3164 793.6763 387.168 799.1855 y385.2324 787.0625 385.667 784.0557 V386.7432 778.7524 L384.4336 781.0557 l381.6475 800.1982 383.0889 804.2607 v378.0723 791.9297 377.9883 783.7485 v374.749 796.3926 377.7881 805.7295 v377.4199 811.9082 378.1504 814.1865 V378.2822 814.4663 l372.8662 838.2026 372.9961 840.3164 v370.4746 849.8926 372.6582 855.0845 V372.5752 854.7637 L374.0889 860.6323 l378.0635 867.8257 379.5801 869.7188 v387.7197 889.4072 388.667 890.3525 V388.5947 890.2637 L392.4971 893.2974 l391.9678 897.0073 400.6348 895.5776 v401.2275 897.5537 402.7627 898.4453 V400.9727 902.3804 L400.8125 906.6777 L402.5703 907.4482 l401.6777 912.3345 402.0059 913.1143 v403.0947 917.5957 408.8105 919.6655 V414.7354 921.2393 l417.6328 921.8047 421.9814 921.5024 V423.8135 921.2124 l429.5293 919.1426 430.3311 914.7695 y430.6582 913.9893 429.7646 909.1035 Y431.5225 908.3325 L431.3633 904.0366 L429.5732 900.1006 l431.1074 899.2085 431.7012 897.2324 y437.3789 897.2197 436.8496 889.2832 Y437.8867 886.3516 L437.5293 873.8813 L445.3447 857.5815 L452.6719 845.7607 L458.4189 851.0273 l459.4707 854.7686 459.9521 855.3335 v461.749 862.1055 463.2529 862.8662 v467.9844 867.7764 472.1523 867.1973 v474.5908 864.0835 474.2227 862.3975 v472.8721 864.6406 471.0137 863.8843 V466.5088 862.2046 L467.3525 859.8135 L471.332 860.8193 l476.207 860.7524 477.6318 859.8687 v481.625 856.1626 481.957 855.5796 v484.6133 851.1743 483.9775 849.3115 V481.75 852.2495 l480.1357 853.6982 480.1895 854.7935 v476.5 857.8213 475.792 858.0454 v471.293 857.5107 470.8027 857.8613 v468.5596 856.9175 468.3682 856.6636 v469.6191 856.1646 471.1367 855.9634 v475.3867 854.7085 476.4521 854.8774 v479.6885 852.7085 480.293 851.3096 v482.1406 846.2544 483.2334 845.1846 V483.4102 844.7036 l480.6797 846.3662 479.2988 848.1953 V476.9756 851.3013 l474.9307 851.7783 473.9102 852.2124 v471.1025 850.6685 470.2539 851.0566 V474.7129 848.4146 l478.0957 846.8804 479.1875 846.0186 v479.251 845.9707 479.3057 845.9214 479.3525 845.8784 c480.209 845.0576 481.002 845.7046 480.75 841.3003 C479.3584 839.9253 l479.6709 842.7676 479.542 843.0815 v477.5781 844.0244 477.3486 844.4277 v476.2266 845.4995 475.7842 845.6836 v472.8926 845.4902 471.7178 846.2744 v470.2568 845.1025 468.042 846.6973 v466.5107 846.4063 465.9668 845.3213 v463.041 843.1504 460.8145 841.4463 v456.5186 837.8403 454.0215 835.2554 v449.3311 830.1177 442.4385 842.2144 v429.2256 858.6484 429.4502 859.8096 V429.4473 859.9165 L430.4736 835.5254 L440.6055 803.8633 L459.7217 778.0566 L459.6445 777.9902 L452.1855 748.5776 L452.0205 748.5957 L449.2012 741.5977 L462.0137 730.4004 L465.4248 719.6934 L465 716.7866 L473.4248 716.7866 L473.4248 704.2813 L467.6807 704.2813 L467.6807 693.2813 L382.6416 693.2813 L382.6416 704.2813 L375.8574 704.2813 L375.8574 716.7866 L381.1934 716.7866 L382.3691 726.8726 L391.2197 731.4902 L399.7646 734.5684 L397.7617 763.0474 L405.1787 792.8057 L400.9697 824.7495 L394.8408 862.8345 L393.2773 864.1406 L391.9619 863.0234 L383.6279 850.8662 L383.833 851.1323 L384.6885 835.8306 Ls330.7515 420.4072 m332.8032 425.5215 337.4214 427.793 v340.3726 428.1719 341.9111 427.793 v344.9536 426.8467 347.2163 421.3545 V344.3496 420.4072 L343.3472 423.5098 L341.2705 420.4072 L335.4614 420.4072 L335.4614 424.1855 L333.1885 420.4072 L330.7515 420.4072 Ls366.7471 296.5732 m363.3867 278.6289 L363.3198 278.667 L355.0459 265.0342 L349.5986 252.1543 L379.7695 239.3916 L340.627 239.3916 L337.0127 258.3291 L334.165 285.2676 L340.6987 303.1045 L343.0947 308.5918 L350.4058 312.2861 L366.8267 296.999 L366.7471 296.5732 Ls307.3154 358.4365 m310.7954 339.6162 L317.1602 331.6387 L320.7861 317.4844 L315.8252 313.9678 L317.0664 316.5918 L315.1445 324.1113 l311.9443 315.832 312.3301 314.6602 v312.7153 313.4912 314.1934 306.7529 314.5801 306.1387 c314.9673 305.5244 309.8164 312.166 309.8794 314.2246 c309.9434 316.2822 309.7944 321.792 y307.8594 309.6689 308.2935 306.6611 V309.3691 301.3584 L307.0605 303.6611 l304.2744 322.8047 305.7153 326.8662 v300.6982 314.5352 300.6143 306.3545 v297.3755 318.999 300.4141 328.3359 v300.0464 334.5146 300.7773 336.793 V300.9082 337.0723 l295.4922 360.8086 295.6221 362.9229 v293.1011 372.498 295.2842 377.6904 V295.2012 377.3691 L296.7153 383.2383 l300.6904 390.4316 302.2061 392.3242 v310.3462 412.0137 311.2925 412.959 V311.2212 412.8691 L315.123 415.9033 l314.5942 419.6133 323.2612 418.1836 v323.8545 420.1592 325.3892 421.0518 V323.5991 424.9863 L323.4395 429.2832 L325.1973 430.0547 l324.3042 434.9404 324.6323 435.7207 v325.7212 440.2012 331.4375 442.2715 V337.3623 443.8457 l340.2593 444.4102 344.6084 444.1084 V346.4404 443.8184 l352.1563 441.748 352.9575 437.376 y353.2842 436.5957 352.3911 431.71 Y354.1494 430.9385 L353.9893 426.6426 L352.1992 422.707 l353.7344 421.8145 354.3271 419.8389 y360.0054 419.8252 359.4761 411.8896 Y360.5132 408.958 L360.1563 396.4873 L367.9717 380.1875 L375.2979 368.3662 L381.0449 373.6338 l382.0977 377.375 382.5781 377.9395 v384.374 384.7119 385.8789 385.4727 v390.6113 390.3828 394.7793 389.8037 v397.2168 386.6895 396.8496 385.0039 v395.498 387.2471 393.6406 386.4902 V389.1357 384.8105 L389.9795 382.4199 L393.958 383.4258 l398.833 383.3584 400.2578 382.4746 v404.251 378.7686 404.583 378.1855 v407.2393 373.7803 406.6045 371.918 V404.376 374.8555 l402.7627 376.3047 402.8164 377.3994 v399.126 380.4277 398.417 380.6514 v393.9189 380.1162 393.4297 380.4678 v391.1865 379.5234 390.9941 379.2695 v392.2451 378.7705 393.7637 378.5693 v398.0137 377.3145 399.0781 377.4834 v402.3154 375.3145 402.9189 373.915 v404.7676 368.8604 405.8604 367.79 V406.0361 367.3096 l403.3066 368.9727 401.9258 370.8018 V399.6025 373.9072 l397.5576 374.3848 396.5361 374.8184 v393.7295 373.2744 392.8799 373.6621 V397.3389 371.0205 l400.7227 369.4863 401.8135 368.625 v401.877 368.5762 401.9326 368.5273 401.9795 368.4844 c402.835 367.6641 403.6279 368.3105 403.376 363.9063 C401.9854 362.5313 l402.2969 365.373 402.168 365.6875 v400.2041 366.6309 399.9756 367.0332 v398.8535 368.1055 398.4102 368.29 v395.5195 368.0967 394.3447 368.8809 v392.8828 367.709 390.668 369.3037 v389.1377 369.0127 388.5938 367.9277 v385.666 365.7568 383.4414 364.0527 v379.1455 360.4463 376.6484 357.8613 v371.957 352.7236 365.0654 364.8203 v351.8525 381.2549 352.0762 382.415 V352.0732 382.5225 L353.1001 358.1318 L363.2314 326.4697 L382.3486 300.6621 L382.2715 300.5967 L374.8125 271.1836 L374.6475 271.2012 L371.8271 264.2031 L384.6406 253.0068 L388.0518 242.2998 L387.626 239.3916 L396.0518 239.3916 L396.0518 226.8877 L390.3076 226.8877 L390.3076 215.8877 L305.2681 215.8877 L305.2681 226.8877 L298.4844 226.8877 L298.4844 239.3916 L303.8203 239.3916 L304.9951 249.4775 L313.8462 254.0967 L322.3911 257.1748 L320.3882 285.6533 L327.8052 315.4111 L323.5962 347.3555 L317.4673 385.4404 L315.9043 386.7471 L314.5884 385.6299 L306.2534 373.4727 L306.4595 373.7383 L307.3154 358.4365 LsUu73.396 660.1079 m75.4482 665.2217 80.0659 667.4937 v83.0171 667.8716 84.5562 667.4937 v87.5972 666.5479 89.8608 661.0547 V86.9932 660.1079 L85.9922 663.2109 L83.9141 660.1079 L78.106 660.1079 L78.106 663.8857 L75.833 660.1079 L73.396 660.1079 Ls*u1 D0.746 0.676 0.668 0.898 K145.2144 597.3086 m143.9854 598.4639 137.0073 597.8379 y136.3125 598.0967 132.4375 597.8066 Y125.5234 601.4077 L117.6323 608.0347 L112.8291 618.9756 L106.3242 634.6914 L106.6343 645.5024 L105.6445 650.0938 l103.0952 658.0298 97.4175 658.0425 v96.8242 660.0195 95.2891 660.9106 V97.0791 664.8467 L97.2393 669.1436 L95.4814 669.9136 l96.3745 674.7998 96.0464 675.5806 v95.5762 679.6445 89.8604 681.7148 v87.2183 682.6699 80.4512 682.0498 Y74.5264 680.4766 l68.8101 678.4058 67.7222 673.9248 y67.3945 673.1445 68.2871 668.2588 Y66.5293 667.4878 L66.6895 663.1914 L68.4795 659.2559 l66.9443 658.3638 67.1211 656.3877 y58.4531 657.8174 58.2134 654.1074 Y57.3892 651.0737 L56.2412 648.1235 l55.1465 646.5347 50.6831 629.7588 y49.1685 627.8667 47.5015 620.6729 Y43.5444 592.8628 L41.4795 580.6416 L32.2295 574.7788 L23.7485 562.8809 L27.1094 557.8115 L26.8975 560.7075 L31.3984 567.0308 l31.4004 558.1528 30.6191 557.1997 v29.8394 556.2476 26.0322 550.4946 25.4512 550.0605 c24.8682 549.6274 32.0664 553.9668 32.7485 555.9097 c33.4302 557.8535 35.5532 562.9385 y32.9912 550.9326 31.5044 548.2837 V28.5903 543.7236 L31.5732 545.0405 l41.0684 561.8955 41.1865 566.2036 v41.4253 552.8926 38.5571 545.2314 v45.0884 556.0674 45.6172 565.8726 v51.1445 576.3389 51.2832 578.7275 v58.3755 594.8525 58.2441 596.9668 V59.9253 603.9219 L63.6123 623.4116 L63.6123 624.1816 L65.3232 621.6709 L69.7642 585.5605 L73.9741 548.6157 L62.5571 523.8574 L69.5601 495.3799 L60.0151 492.3008 L51.1631 487.6826 L49.9883 477.5967 L39.3062 477.5967 L39.3062 465.0928 L46.0894 465.0928 L46.0894 454.0928 L131.1294 454.0928 L131.1294 465.0928 L136.873 465.0928 L136.873 476.4165 L139.8555 476.0498 L139.0503 482.0967 L132.8374 491.4595 L117.4463 498.7188 L118.2422 506.2207 L118.4063 506.2485 L116.9712 533.4785 L108.7095 560.6748 L98.9204 597.6519 L98.5151 614.2266 L99.7124 618.0488 l103.1123 613.1265 111.2334 603.0244 Y116.1113 596.5498 l119.3955 595.0869 124.2515 592.2808 y126.6133 590.7725 129.6533 588.7627 y130.8584 588.6235 131.6553 587.2837 y130.9131 584.6567 132.5142 583.6836 y132.1782 582.3115 133.3481 579.6616 y133.3271 579.1816 132.7021 577.7607 y132.4014 577.4087 132.1875 575.2397 y131.9365 575.0107 129.1592 574.3335 Y130.9253 573.4956 l135.1504 574.7646 134.2725 575.2886 134.7505 576.3735 c134.7754 576.4326 134.8022 576.5005 134.8262 576.5767 c135.2622 577.8965 135.5493 581.6006 Y136.5083 586.6938 l136.4341 585.7627 138.8433 583.6538 y138.7852 582.5459 139.0352 580.4604 Y136.9102 577.2168 l135.6631 575.2935 135.0332 572.1587 Y135.4243 572.4888 l136.0571 573.8828 140.1763 577.3457 y141.2852 578.3916 142.2163 582.1748 y141.6943 583.1177 141.4214 587.5405 y141.0923 589.0366 141.1333 590.3828 y141.4385 590.2886 143.0913 588.5039 y142.9282 587.9229 144.9683 583.8789 y145.0005 583.1348 143.4155 578.6328 y142.3672 578.3096 141.5571 576.2979 Y139.5571 573.1997 l141.5254 573.2397 144.7573 577.2407 y145.1924 577.7515 147.3115 582.7715 y147.6553 584.4126 146.0522 589.0166 Y143.7471 592.4126 L145.7051 594.0234 L148.8232 590.3628 l150.1694 588.8755 148.5234 586.8389 y150.2334 587.0688 152.3271 590.4248 y151.4463 594.5405 145.2144 597.3086 Ys0 D104.5015 531.4668 m105.3784 510.2798 L105.3022 510.2979 L101.0801 494.9194 L99.3691 481.0396 L127.3032 477.5967 L86.7954 477.5967 L81.1812 496.5337 L79.3335 523.4727 L88.0352 541.4048 L91.2632 548.7969 L96.5742 549.4897 L104.5015 531.4668 Ls*U4 M116.8945 533.4131 m116.8882 533.4131 L116.8882 533.4121 LS0 0 0 1 K10 M236.5029 660.2695 m234.4512 665.3838 229.833 667.6558 v226.8818 668.0337 225.3428 667.6558 v222.3018 666.709 220.0381 661.2168 V222.9063 660.2695 L223.9072 663.3716 L225.9849 660.2695 L231.793 660.2695 L231.793 664.0479 L234.0659 660.2695 L236.5029 660.2695 Ls*u1 D0.746 0.676 0.668 0.898 K157.5723 590.5869 m159.665 587.231 161.3755 587.001 v159.7295 589.0371 161.0752 590.5249 V164.1943 594.1851 L166.1514 592.5742 L163.8462 589.1787 l162.2432 584.5742 162.5884 582.9331 v164.7061 577.9141 165.1411 577.4028 v168.373 573.4019 170.3413 573.3618 V168.3413 576.459 l167.5313 578.4707 166.4834 578.7949 v164.8984 583.2969 164.9312 584.04 v166.9702 588.085 166.8071 588.665 v168.4614 590.4512 168.7651 590.5449 v168.8062 589.1978 168.4775 587.7031 v168.2041 583.2798 167.6821 582.3369 v168.6143 578.5527 169.7222 577.5078 v173.8423 574.0439 174.4741 572.6509 V174.8662 572.3208 l174.2363 575.4551 172.9893 577.3779 V170.8643 580.6221 l171.1143 582.707 171.0552 583.8149 v173.4653 585.9248 173.3901 586.855 V174.3491 581.7617 l174.6362 578.0591 175.0732 576.7388 v175.0962 576.6621 175.123 576.5938 175.1484 576.5361 c175.6274 575.4512 174.748 574.9268 178.9731 573.6567 C180.7402 574.4951 l177.9634 575.1729 177.7124 575.4019 v177.4971 577.5708 177.1973 577.9229 v176.5723 579.3438 176.5513 579.8228 v177.7202 582.4741 177.3853 583.8457 v178.9854 584.8188 178.2432 587.4458 v179.04 588.7852 180.2451 588.9248 v183.2852 590.9341 185.6475 592.4429 v190.5044 595.249 193.7871 596.7109 V198.665 603.187 l206.7861 613.2881 210.1865 618.2109 V211.3833 614.3877 L210.9785 597.814 L201.1895 560.8359 L192.9272 533.6401 L191.4932 506.4111 L191.6572 506.3828 L192.4521 498.8809 L177.0615 491.6221 L170.8481 482.2588 L170.0435 476.2119 L173.0264 476.5791 L173.0264 465.2549 L178.7705 465.2549 L178.7705 454.2549 L263.8091 454.2549 L263.8091 465.2549 L270.5933 465.2549 L270.5933 477.7588 L259.9102 477.7588 L258.7354 487.8438 L249.8843 492.4629 L240.3394 495.542 L247.3423 524.02 L235.9253 548.7778 L240.1343 585.7217 L244.5762 621.833 L246.2861 624.3428 L246.2861 623.5728 L249.9731 604.083 L251.6543 597.1289 l251.5244 595.0142 258.6162 578.8901 y258.7544 576.501 264.2822 566.0342 y264.8101 556.23 271.3413 545.394 y268.4731 553.0547 268.7124 566.3647 y268.8301 562.0571 278.3252 545.2031 Y281.3081 543.8857 L278.3945 548.4458 l276.9072 551.0947 274.3452 563.1011 y276.4683 558.0151 277.1504 556.0718 v277.832 554.1289 285.0303 549.7891 284.4482 550.2217 c283.8662 550.6558 280.0591 556.4102 279.2793 557.3618 c278.498 558.3149 278.5005 567.1929 Y283.0024 560.8691 L282.7891 557.9741 L286.1504 563.042 L277.6704 574.9399 L268.4204 580.8027 L266.3555 593.0249 L262.3975 620.835 l260.7305 628.0288 259.2153 629.9209 v254.7524 646.6968 253.6582 648.2861 V252.5093 651.2358 L251.6851 654.27 l251.4453 657.98 242.7783 656.5498 v242.9541 658.5259 241.4204 659.418 V243.2095 663.353 L243.3691 667.6499 L241.6113 668.4209 l242.5054 673.3071 242.1772 674.0869 v241.0884 678.5679 235.3721 680.6377 V229.4473 682.2119 l222.6802 682.8311 220.0381 681.877 v214.3223 679.8071 213.8525 675.7422 y213.5244 674.9619 214.4175 670.0762 Y212.6602 669.3047 L212.8203 665.0088 L214.6094 661.0728 l213.0742 660.1812 212.4814 658.2051 y206.8032 658.1919 204.2544 650.2559 Y203.2642 645.665 L203.5742 634.854 L197.0703 619.1367 L192.2661 608.1958 L184.3755 601.5698 L177.4624 597.9678 l173.5874 598.2588 172.8911 598 v165.9131 598.625 164.6841 597.4707 v158.4521 594.7021 157.5723 590.5869 Vs0 D213.3242 549.6519 m218.6362 548.958 L221.8633 541.5659 L230.5664 523.6338 L228.7183 496.6958 L223.1035 477.7588 L182.5952 477.7588 L210.5303 481.2021 L208.8193 495.082 L204.5962 510.459 L204.5215 510.4409 L205.3975 531.6289 L213.3242 549.6519 Ls*U4 M193.0044 533.5752 m193.0107 533.5752 L193.0107 533.5742 LSUu*u333.7998 620.2593 m334.0249 619.0986 319.835 603.1416 y312.9438 591.0435 308.252 596.1826 y305.7559 598.7686 301.459 602.3745 y299.2339 604.0771 296.3066 606.2485 y295.7627 607.3335 294.2319 607.6245 y292.0166 606.0293 290.5557 607.2012 y289.3809 606.4175 286.4897 606.6104 y286.0469 606.4272 284.9248 605.3545 y284.6958 604.9512 282.7319 604.0083 y282.6025 603.6943 282.915 600.8535 Y281.5239 602.2275 l281.2729 606.6313 282.0659 605.9844 282.9219 606.8057 c282.9678 606.8486 283.0229 606.8975 283.0869 606.9453 c284.1777 607.8076 287.5605 609.3413 Y292.02 611.9834 l291.1709 611.5952 288.3638 613.1396 y287.3428 612.7056 285.2979 612.2285 Y282.9746 609.1226 l281.5938 607.2935 278.8638 605.6304 Y279.04 606.1104 l280.1338 607.1816 281.981 612.2363 y282.585 613.6353 285.8218 615.8042 y286.8867 615.6353 291.1367 616.8906 y292.6548 617.0923 293.9058 617.5903 y293.7139 617.8442 291.4707 618.7886 y290.981 618.4375 286.4829 618.9727 y285.7739 618.7485 282.083 615.7202 y282.1377 614.6255 280.5239 613.1763 Y278.2959 610.2383 l277.6606 612.1016 280.3169 616.5063 y280.6489 617.0894 284.6416 620.7954 y286.0669 621.6792 290.9419 621.7466 Y294.9209 620.7402 L295.7646 623.1313 L291.2607 624.8115 l289.4019 625.5674 288.0508 623.3242 y287.6826 625.0103 290.1206 628.1255 y294.2886 628.7046 299.021 623.7935 y300.5259 623.0322 302.3218 616.2603 y302.8027 615.6953 303.855 611.9546 Y309.6016 606.6875 L316.9287 618.5083 L324.7437 634.8086 L340.624 647.6343 L339.749 652.7593 L334.3208 651.1343 L329.6528 655.2612 L332.647 656.7373 l332.4839 659.0576 333.4287 660.0063 v334.0488 658.5923 335.3208 657.4575 V339.5146 662.1494 l339.4648 664.1235 335.5327 664.4272 v332.0557 664.6963 328.5527 663.3242 327.7017 663.0005 C328.4248 667.8496 L324.9048 667.2803 L324.3867 669.2974 L328.6519 672.3755 l329.4229 674.1313 330.7456 673.9873 y331.0288 674.5234 333.396 675.8066 y333.4507 676.4111 333.8828 678.6162 Y335.6826 679.5332 l336.5977 680.3164 338.377 680.3906 Y342.4517 682.0522 l345.0938 683.0063 348.0117 682.3872 Y353.938 680.8145 l359.6528 678.7432 360.7417 674.2622 y361.0698 673.4824 360.1758 668.5952 Y361.9346 667.8252 L361.7749 663.5283 L359.9849 659.5933 l361.5186 658.7012 362.1128 656.7246 Y361.6387 656.5034 l370.3057 657.9346 369.7764 654.2246 Y373.5088 651.3223 L373.6074 651.2793 l373.625 651.2622 373.6494 651.2266 373.6719 651.1963 C373.6787 651.1904 L373.6738 651.1924 l374.8672 649.5742 382.6934 630.6455 y384.21 628.7534 388.1846 621.5596 Y389.4854 616.5166 L389.5371 617.2905 l391.7197 612.0977 389.2773 601.2432 y389.4082 599.1294 383.9922 575.3936 Y384.123 575.1133 l384.8535 572.8354 384.4854 566.6563 y387.5244 557.3193 384.2861 544.6753 y384.2021 552.8564 379.1846 565.1875 y380.626 561.1255 377.8398 541.9824 Y375.5313 539.6792 L376.6064 544.9824 l377.041 547.9893 375.1055 560.1123 y374.957 554.6035 375.0205 552.5454 v375.084 550.4863 369.9326 543.8452 370.3193 544.4595 c370.707 545.0732 372.1846 551.8125 372.5703 552.9814 c372.9561 554.1514 369.7559 562.4326 Y367.834 554.9126 L369.0752 552.2886 L364.1138 555.8052 L367.7402 569.9595 L374.2568 578.7603 L377.6563 597.1396 L378.3389 612.0566 L378.6465 611.7935 L370.9961 623.2974 L368.9961 625.0674 L367.4326 623.7612 L361.3037 585.6763 L353.0947 548.7314 L364.5117 523.9746 L361.5088 495.4966 L371.0537 492.4175 L379.9043 487.7983 L381.0947 477.5845 L383.1748 477.5845 L383.1748 465.0796 L377.4307 465.0796 L377.4307 454.0791 L292.3916 454.0791 L292.3916 465.0796 L285.6089 465.0796 L285.6089 477.5845 L297.293 477.5845 L296.8486 480.6206 L300.2598 491.3271 L313.0728 502.5254 L310.2529 509.5225 L310.0879 509.5034 L302.5518 538.9824 L324.9917 561.2905 L334.124 595.9521 L334.124 619.7593 L332.895 619.1406 LS350.7358 523.5894 m349.8877 496.6504 L344.2349 477.5845 L304.8237 477.5845 L335.3018 490.4746 L329.854 503.3555 L321.5806 516.9873 L321.5127 516.9492 L318.0317 535.6792 L330.291 547.8423 L343.2026 545.4214 L350.7358 523.5894 Ls*UUu10 M438.6123 633.1914 m436.6318 631.0835 417.2793 624.5957 Y415.0947 632.0786 l416.1348 635.8223 416.0156 636.5557 v417.9902 643.2773 417.0977 644.7085 v415.5967 651.3604 411.7314 653.0264 v408.0322 651.6265 407.4736 649.9946 v409.791 651.2114 410.9883 649.6025 V413.9697 645.8296 L412.0078 644.2236 L409.127 647.1465 l404.9229 649.6152 403.2471 649.5977 v397.9111 648.4985 397.3242 648.1724 v392.7705 645.7813 392.3477 643.8594 V395.7754 645.2163 l397.9072 645.6196 398.4287 646.5845 v403.1533 647.2607 403.876 647.0845 v407.4453 644.2954 408.0459 644.3413 v409.4756 642.3726 409.5078 642.0557 v408.1797 642.2773 406.7773 642.8926 v402.4922 644.0225 401.6689 644.7173 v397.7764 644.5415 396.5342 643.6572 v392.335 640.2925 390.8447 639.9434 V390.4443 639.6245 l393.6416 639.6304 395.7705 640.4795 V399.3662 641.9316 l401.3623 641.2793 402.4609 641.1216 v404.0615 638.3467 404.9883 638.2373 V399.8066 638.2896 l396.1172 638.7314 394.7373 638.5605 v394.6582 638.5518 394.5859 638.5386 394.5234 638.5254 c393.3662 638.2666 393.0244 639.2314 390.9551 635.3345 C391.4326 633.4385 l392.6387 636.0303 392.9111 636.2324 v395.0801 636.0205 395.4854 636.2456 v397 636.5825 397.4756 636.5098 v399.8467 634.8457 401.2578 634.9072 v401.9004 633.1484 404.6211 633.3633 v405.7793 632.3203 405.6816 631.1113 v407.0605 627.7373 408.0791 625.1274 v409.8848 619.8164 410.6797 616.3115 v412.0283 609.4854 424.1924 616.2583 v438.9219 622.4917 444.4199 624.9463 V443.3936 600.5557 L437.2617 564.8936 L424.4766 552.0537 L414.1455 542.7124 L415.8574 513.2646 L416.1094 505.0547 L401.1904 496.8706 L395.5596 487.1455 L395.1953 482.0596 L394.3721 482.0596 L394.3721 469.5557 L401.1563 469.5557 L401.1563 458.5557 L486.1953 458.5557 L486.1953 469.5557 L491.9395 469.5557 L491.9395 478.3125 L493.0381 478.3125 L491.498 491.5283 L482.6475 496.1455 L473.1025 499.2246 L476.7168 527.7036 L464.6885 552.4614 L472.8975 589.4053 L479.0264 627.4902 L480.5889 628.7964 L482.4082 627.2383 L490.2393 615.5225 L489.9316 615.7856 L486.9775 601.5454 L481.3613 583.7188 L473.8193 575.7773 L468.4932 562.1724 L472.9883 558.0757 L472.0762 560.8325 L474.9014 568.0625 l477.0674 559.4526 476.541 558.3374 v476.0166 557.2246 473.7275 550.7163 473.2686 550.1533 c472.8086 549.5913 478.7324 555.5547 478.9199 557.6055 c479.1084 559.6563 479.9287 565.1064 y480.3691 552.8374 479.5723 549.9053 V477.8564 544.7734 L480.4297 546.7773 l485.5303 565.4375 484.5967 569.6445 v488.0703 556.7944 487.1563 548.6646 v491.9141 560.8184 490.0371 570.4565 v491.1553 576.5444 490.708 578.8955 V490.6133 579.1885 l498.8848 602.0864 499.0137 604.2007 v502.7617 614.6753 501.2285 620.0957 V501.1631 619.9194 L499.7783 625.2886 l495.8027 632.4824 494.2871 634.3745 v486.46 653.3057 485.2676 654.9224 V485.2725 654.9194 L485.2646 654.9253 l485.2422 654.9556 485.2168 654.9917 485.2002 655.0083 C485.0938 655.0586 L481.3701 657.9536 l478.5244 663.5557 469.8574 662.1255 v468.9072 663.9575 467.2344 664.5493 V468.2637 668.7485 L467.625 673.0005 L465.7549 673.4316 l465.7275 678.3994 465.2607 679.1045 v463.3594 683.3066 457.3594 684.2822 V451.2451 684.7305 l448.2627 684.7974 445.8418 683.3706 V442.1465 680.9824 l440.4121 680.5806 439.6582 679.6406 V438.0596 678.4063 l438.0439 676.1597 438.1016 675.5547 v436.0137 673.8555 435.834 673.2764 v434.5068 673.1724 434.0752 671.3037 V430.4551 667.4883 L431.3369 665.6035 L434.6914 666.8145 L434.8789 661.9155 l435.6553 662.3916 439.5996 664.5313 443.0664 664.9116 c446.9863 665.3403 450.4277 663.9814 Y443.3936 657.8804 l441.9336 658.7598 441.0615 660.0347 y440.3096 658.9268 440.8994 656.6777 Y438.2305 654.6724 L443.7402 653.0264 L450.1563 655.0083 L452.4639 653.0264 L447.8184 648.5806 L445.5732 638.9116 L438.6123 633.1914 LS456.3691 544.6021 m462.4805 527.3179 L461.4805 500.3799 L456.0498 482.0591 L400.5068 482.0591 L435.2314 488.5132 L432.6768 502.2622 L428.5234 517.353 L429.1543 539.6221 L445.0879 553.709 L452.3994 552.0161 L456.3691 544.6021 LSUu0 0 0 1 K95.9863 421.2969 m93.9341 426.4102 89.3164 428.6826 v86.3652 429.0605 84.8262 428.6826 v81.7852 427.7363 79.5215 422.2441 V82.3882 421.2969 L83.3901 424.3984 L85.4683 421.2969 L91.2764 421.2969 L91.2764 425.0742 L93.5493 421.2969 L95.9863 421.2969 Ls0.746 0.676 0.668 0.898 K4 M107.5225 357.6055 m101.5654 309.8047 L105.7754 346.7471 L107.5225 357.6055 Ls0 0 0 1 K10 M123.27 372.6191 m123.1182 372.8652 L113.4658 385.3691 L113.4658 386.1387 L111.9038 384.834 L107.5229 357.6055 LS101.5654 309.8047 m111.9824 285.0459 L107.9795 256.5684 L115.5254 253.4883 L124.3765 248.8711 L125.3506 240.5098 L133.9116 240.5098 L133.9116 228.0059 L128.1675 228.0059 L128.1675 217.0059 L43.1284 217.0059 L43.1284 228.0059 L36.3442 228.0059 L36.3442 240.5098 L41.4932 240.5098 L41.3203 241.6924 L44.7314 252.3984 L57.5444 263.5967 L54.7236 270.5938 L54.5586 270.5762 L47.1006 299.9893 L47.0234 300.0547 L71.1392 321.8633 L76.2715 357.5244 L77.2974 381.916 L77.2944 381.8086 l77.5195 380.6465 64.3052 364.2129 Y57.9746 359.3779 l54.5342 358.3398 49.3613 356.1689 y46.8296 354.9697 43.5605 353.3594 y42.3462 353.373 41.3872 352.1436 y41.7925 349.4453 40.0825 348.6816 y40.2422 347.2773 38.7485 344.7949 y38.7085 344.3174 39.1504 342.8301 y39.4023 342.4414 39.3423 340.2627 y39.5635 340.0039 42.2324 338.9824 Y40.3745 338.374 l36.3433 340.166 37.2813 340.5742 36.9424 341.7109 c36.9253 341.7715 36.9072 341.8438 36.8936 341.9219 c36.6265 343.2871 36.8096 346.9971 Y36.4995 352.1699 l36.4556 351.2383 33.7993 349.4473 y33.7183 348.3418 33.2075 346.3047 Y34.9063 342.8184 l35.9014 340.7539 36.1313 337.5654 Y35.7842 337.9414 l35.3335 339.4043 31.6826 343.3584 y30.7144 344.5361 30.2666 348.4063 y30.9033 349.2764 31.7314 353.6299 y32.2466 355.0713 32.3755 356.4121 y32.0615 356.3574 30.1963 354.7949 y30.2842 354.1982 27.7515 350.4434 y27.6265 349.71 28.6313 345.043 y29.6304 344.5918 30.1802 342.4941 Y31.7744 339.168 l29.8262 339.4551 27.1245 343.8311 y26.7573 344.3926 25.2886 349.6406 y25.1533 351.3115 27.3242 355.6777 Y30.0386 358.7559 L28.2983 360.5996 L24.7446 357.3623 l23.2212 356.0566 24.5986 353.8281 y22.9302 354.2715 21.2764 357.8643 y22.6685 361.8359 29.1992 363.7979 y30.5645 364.7891 37.4072 363.2881 y38.1304 363.457 41.9385 362.6816 Y56.8672 370.8965 L61.4004 380.043 L69.2153 395.8809 l68.7402 397.165 69.2153 408.8457 Y69.2153 408.4434 L69.8955 411.2832 l69.3652 419.2188 75.0435 419.2314 v75.6362 421.207 77.1714 422.0996 V75.3813 426.0352 L75.2212 430.332 L76.9795 431.1025 l76.0864 435.9883 76.4146 436.7686 v77.5034 441.25 83.2183 443.3203 V82.6006 442.9043 l83.2075 444.2334 91.6982 443.2959 92.0093 443.2383 C97.9346 441.665 l103.6504 439.5938 104.7393 435.1133 y105.0674 434.334 104.1733 429.4473 Y105.9316 428.6758 L105.7715 424.3799 L103.9824 420.4434 l105.5166 419.5527 106.1104 417.5771 y114.7773 419.0059 114.2476 415.2969 Y118.1025 412.2988 L118.0786 412.3516 l118.0962 412.334 118.1216 412.2969 118.1436 412.2676 C118.1504 412.2617 L118.1465 412.2637 l118.8413 411.3203 121.7832 404.5127 124.1235 398.9824 c125.7993 395.0195 127.1655 391.7168 y127.3506 391.4863 127.5723 391.1738 127.8184 390.8086 c129.5923 388.1738 132.6553 382.6309 Y134.1694 376.7617 L142.9814 354.1113 L151.3184 347.0098 L158.0474 334.041 L154.0093 329.4941 L154.6265 332.3301 L151.0552 339.2217 l149.8096 330.4316 150.4482 329.3789 v151.0884 328.3262 154.0503 322.0977 154.5664 321.5859 c155.0825 321.0762 148.5635 326.3809 148.1602 328.4004 c147.7563 330.4199 146.3672 335.752 y147.2212 323.5059 148.3232 320.6748 V150.5703 315.752 L147.7993 317.4736 l140.7612 335.4912 141.2485 339.7744 v139.1465 326.6289 140.9126 318.6416 v134.9004 330.2266 135.7515 340.0078 v133.9976 345.9453 134.1943 348.3301 V134.2583 348.6309 l134.1885 348.8711 122.5415 374.2041 123.2705 372.6191 CS61.5664 296.1504 m78.4995 314.2373 L85.8115 311.543 L88.2075 306.0566 L97.7417 284.2197 L93.8936 257.2813 L88.7905 240.0684 L53.2144 240.0684 L79.3076 251.1055 L73.8594 263.9854 L65.5864 277.6191 L65.5186 277.5801 L62.0376 296.3096 LS219.6333 415.8369 m221.6855 420.9502 226.3032 423.2236 v229.2544 423.6016 230.7935 423.2236 v233.8345 422.2764 236.0986 416.7842 V233.2314 415.8369 L232.2295 418.9395 L230.1514 415.8369 L224.3433 415.8369 L224.3433 419.6143 L222.0703 415.8369 L219.6333 415.8369 Ls0.746 0.676 0.668 0.898 K4 M208.0972 352.1455 m214.0542 304.3447 L209.8442 341.2891 L208.0972 352.1455 Ls0 0 0 1 K10 M192.3496 367.1592 m192.5015 367.4053 L202.1538 379.9092 L202.1538 380.6797 L203.7158 379.374 L208.0967 352.1455 LS214.0542 304.3447 m203.6372 279.5859 L207.6401 251.1094 L200.0942 248.0293 L191.2432 243.4111 L190.2695 235.0498 L181.7085 235.0498 L181.7085 222.5459 L187.4521 222.5459 L187.4521 211.5459 L272.4912 211.5459 L272.4912 222.5459 L279.2754 222.5459 L279.2754 235.0498 L274.1265 235.0498 L274.2993 236.2334 L270.8882 246.9395 L258.0752 258.1367 L260.8965 265.1338 L261.0615 265.1172 L268.5195 294.5303 L268.5962 294.5947 L244.4805 316.4043 L239.3481 352.0654 L238.3223 376.4561 L238.3252 376.3486 l238.1001 375.1865 251.3145 358.7529 Y257.6455 353.918 l261.0854 352.8799 266.2583 350.709 y268.79 349.5098 272.0591 347.9004 y273.2734 347.9131 274.2324 346.6836 y273.8271 343.9863 275.5371 343.2217 y275.3774 341.8184 276.8711 339.335 y276.9111 338.8584 276.4702 337.3701 y276.2173 336.9824 276.2773 334.8027 y276.0562 334.5439 273.3872 333.5234 Y275.2451 332.9141 l279.2764 334.7061 278.3384 335.1152 278.6772 336.251 c278.6943 336.3115 278.7124 336.3838 278.7261 336.4619 c278.9932 337.8271 278.8105 341.5371 Y279.1201 346.71 l279.1641 345.7793 281.8203 343.9883 y281.9014 342.8818 282.4121 340.8447 Y280.7134 337.3594 l279.7183 335.2939 279.4883 332.1064 Y279.8354 332.4824 l280.2861 333.9453 283.9375 337.8994 y284.9053 339.0762 285.3535 342.9473 y284.7163 343.8174 283.8882 348.1699 y283.373 349.6123 283.2441 350.9521 y283.5581 350.8984 285.4233 349.335 y285.3354 348.7393 287.8682 344.9844 y287.9932 344.25 286.9883 339.583 y285.9893 339.1318 285.4395 337.0342 Y283.8452 333.708 l285.7935 333.9951 288.4951 338.3711 y288.8623 338.9326 290.3311 344.1807 y290.4663 345.8516 288.2954 350.2178 Y285.5811 353.2959 L287.3213 355.1396 L290.8755 351.9033 l292.3984 350.5967 291.0215 348.3682 y292.6895 348.8115 294.3433 352.4053 y292.9512 356.376 286.4204 358.3379 y285.0552 359.3291 278.2124 357.8281 y277.4893 357.9971 273.6812 357.2217 Y258.7524 365.4365 L254.2192 374.583 L246.4043 390.4209 l246.8794 391.7051 246.4043 403.3857 Y246.4043 402.9844 L245.7241 405.8242 l246.2544 413.7588 240.5762 413.7725 v239.9834 415.7471 238.4482 416.6396 V240.2383 420.5762 L240.3984 424.8721 L238.6401 425.6426 l239.5332 430.5293 239.2051 431.3086 v238.1162 435.79 232.4014 437.8613 V233.0195 437.4453 l232.4121 438.7744 223.9214 437.8359 223.6104 437.7793 C217.6855 436.2051 l211.9692 434.1338 210.8804 429.6543 y210.5532 428.874 211.4463 423.9883 Y209.6885 423.2158 L209.8481 418.9199 L211.6372 414.9844 l210.1035 414.0928 209.5093 412.1172 y200.8423 413.5459 201.3721 409.8369 Y197.5171 406.8389 L197.5415 406.8916 l197.5234 406.874 197.4985 406.8369 197.4761 406.8076 C197.4692 406.8018 L197.4731 406.8037 l196.7783 405.8613 193.8364 399.0527 191.4961 393.5234 c189.8203 389.5596 188.4541 386.2568 y188.2695 386.0273 188.0474 385.7139 187.8013 385.3486 c186.0273 382.7139 182.9644 377.1709 Y181.4502 371.3018 L172.6382 348.6523 L164.3013 341.5498 L157.5723 328.5811 L161.6104 324.0342 L160.9932 326.8701 L164.5645 333.7617 l165.8105 324.9717 165.1714 323.9189 v164.5313 322.8672 161.5693 316.6377 161.0532 316.126 c160.5371 315.6162 167.0562 320.9209 167.4595 322.9414 c167.8633 324.96 169.2524 330.292 y168.3984 318.0459 167.2964 315.2148 V165.0493 310.292 L167.8203 312.0137 l174.8584 330.0322 174.3711 334.3154 v176.4731 321.1689 174.7075 313.1816 v180.7192 324.7666 179.8682 334.5479 v181.6221 340.4863 181.4253 342.8701 V181.3613 343.1709 l181.4312 343.4111 193.0781 368.7441 192.3491 367.1592 CS254.0532 290.6904 m237.1201 308.7773 L229.8081 306.084 L227.4121 300.5967 L217.8784 278.7598 L221.7261 251.8213 L226.8291 234.6084 L262.4063 234.6084 L236.312 245.6455 L241.7603 258.5254 L250.0332 272.1602 L250.1011 272.1211 L253.582 290.8496 LSULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF